// <auto-generated />
using System;
using ICD.Base.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ICD.Base.Api.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ICD.Base.Domain.Entity.BaseTypeEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.ToTable("BaseType","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemGroupEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ApplicationRef");

                    b.Property<bool>("IsActive");

                    b.HasKey("Key");

                    b.ToTable("ItemGroup","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemGroupLanguageEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemGroupRef");

                    b.Property<int>("LanguageRef");

                    b.Property<string>("_Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.HasIndex("ItemGroupRef");

                    b.ToTable("ItemGroupLanguage","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemRowEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<int>("ItemGroupRef");

                    b.HasKey("Key");

                    b.HasIndex("ItemGroupRef");

                    b.ToTable("ItemRow","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemRowLanguageEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemRowRef");

                    b.Property<int>("LanguageRef");

                    b.Property<string>("_Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.HasIndex("ItemRowRef");

                    b.ToTable("ItemRowLanguage","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("LevelNo");

                    b.Property<int>("LocationTypeRef");

                    b.Property<int?>("ParentRef");

                    b.HasKey("Key");

                    b.HasIndex("LocationTypeRef");

                    b.HasIndex("ParentRef");

                    b.ToTable("Location","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationLanguageEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageRef");

                    b.Property<int>("LocationRef");

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.HasIndex("LocationRef");

                    b.ToTable("LocationLanguage","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationTypeEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.ToTable("LocationType","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationTypeLanguageEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageRef");

                    b.Property<int>("LocationTypeRef");

                    b.Property<string>("_Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.HasIndex("LocationTypeRef");

                    b.ToTable("LocationTypeLanguage","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonBaseTypeEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseTypeRef");

                    b.Property<long>("PersonRef");

                    b.HasKey("Key");

                    b.HasIndex("BaseTypeRef");

                    b.HasIndex("PersonRef");

                    b.ToTable("PersonBaseType","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonEntity", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EconomicId");

                    b.Property<string>("NationalIdentity")
                        .HasMaxLength(100);

                    b.Property<int>("PersonTitleRef");

                    b.HasKey("Key");

                    b.HasIndex("PersonTitleRef");

                    b.ToTable("Person","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonIdentityEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("Date");

                    b.Property<string>("FirstIdNo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("Date");

                    b.Property<int>("ItemRowRef_IdentityType");

                    b.Property<int?>("LocationRef_BirthLocation")
                        .HasColumnName("LocationRef_BirthPlace");

                    b.Property<int>("LocationRef_IssuePlace");

                    b.Property<long>("PersonRef");

                    b.Property<string>("SecondIdNo")
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.HasIndex("ItemRowRef_IdentityType");

                    b.HasIndex("LocationRef_IssuePlace");

                    b.HasIndex("PersonRef");

                    b.ToTable("PersonIdentity","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonLanguageEntity", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageRef");

                    b.Property<long>("PersonRef");

                    b.Property<string>("_FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<string>("_LastName")
                        .HasMaxLength(200);

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Key");

                    b.HasIndex("PersonRef");

                    b.ToTable("PersonLanguage","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonTitleEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLegal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ItemRowRef_LegalType");

                    b.Property<int>("Order");

                    b.HasKey("Key");

                    b.HasIndex("ItemRowRef_LegalType");

                    b.ToTable("PersonTitle","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonTitleLanguageEntity", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageRef");

                    b.Property<int>("PersonTitleRef");

                    b.Property<string>("_Description")
                        .HasMaxLength(1000);

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.HasIndex("PersonTitleRef");

                    b.ToTable("PersonTitleLanguage","BAS");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemGroupLanguageEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.ItemGroupEntity", "itemGroupEntity")
                        .WithMany("itemGroupLanguageEntities")
                        .HasForeignKey("ItemGroupRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemRowEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.ItemGroupEntity", "itemGroupEntity")
                        .WithMany("itemRowEntities")
                        .HasForeignKey("ItemGroupRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.ItemRowLanguageEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.ItemRowEntity", "itemRowEntity")
                        .WithMany("itemRowLanguageEntities")
                        .HasForeignKey("ItemRowRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.LocationTypeEntity", "locationTypeEntity")
                        .WithMany("locationEntities")
                        .HasForeignKey("LocationTypeRef")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ICD.Base.Domain.Entity.LocationEntity", "locationEntity")
                        .WithMany("locationEntities")
                        .HasForeignKey("ParentRef");
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationLanguageEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.LocationEntity", "locationEntity")
                        .WithMany("locationLanguageEntities")
                        .HasForeignKey("LocationRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.LocationTypeLanguageEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.LocationTypeEntity", "locationTypeEntity")
                        .WithMany("locationTypeLanguageEntities")
                        .HasForeignKey("LocationTypeRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonBaseTypeEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.BaseTypeEntity", "baseTypeEntity")
                        .WithMany("personBaseTypeEntities")
                        .HasForeignKey("BaseTypeRef")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ICD.Base.Domain.Entity.PersonEntity", "personEntity")
                        .WithMany("personBaseTypeEntities")
                        .HasForeignKey("PersonRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.PersonTitleEntity", "PersonTitleEntity")
                        .WithMany("personEntities")
                        .HasForeignKey("PersonTitleRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonIdentityEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.ItemRowEntity", "itemRowEntity")
                        .WithMany("personIdentityEntities")
                        .HasForeignKey("ItemRowRef_IdentityType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ICD.Base.Domain.Entity.LocationEntity", "locationEntity")
                        .WithMany("personIdentityEntities")
                        .HasForeignKey("LocationRef_IssuePlace")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ICD.Base.Domain.Entity.PersonEntity", "personEntity")
                        .WithMany("personIdentityEntities")
                        .HasForeignKey("PersonRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonLanguageEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.PersonEntity", "personEntity")
                        .WithMany("personLanguageEntities")
                        .HasForeignKey("PersonRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonTitleEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.ItemRowEntity", "ItemRowEntity")
                        .WithMany("PersonTitleEntities")
                        .HasForeignKey("ItemRowRef_LegalType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD.Base.Domain.Entity.PersonTitleLanguageEntity", b =>
                {
                    b.HasOne("ICD.Base.Domain.Entity.PersonTitleEntity", "personTitleEntity")
                        .WithMany("personTitleLanguageEntities")
                        .HasForeignKey("PersonTitleRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
